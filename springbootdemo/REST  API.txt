[1]API
API(Application Programming Interface)는 어플리케이션 소프트웨어를 구축하고 통합하기 위한 정의 및 프로토콜 세트이다. 
 즉, 서로 다른 소프트웨어 애플리케이션들이 서로 소통하도록 돕는 일종의 다리 역할을 합니다.
 클라이언트가 서버의 자원을 요청할 수 있도록 서버에서 제공하는 인터페이스이다.

[2]REST
REST(Representational State Transfer)는 웹 서비스 개발을 위한 아키텍처 스타일 중 하나로, 네트워크 아키텍처 원리의 모음이다. 
REST는 클라이언트와 서버 간의 통신에서 서버의 리소스가 URL로 식별되고, 일반적으로 JSON 또는 XML 형식으로 전송된다.
HTTP URL로 서버의 자원(resource)을 명시하고, HTTP 메서드(POST, GET, PATCH/PUT, DELETE)로 해당 자원에 대해
CRUD(생성, 조회, 수정, 삭제)하는 것을 말한다.

[3] REST API
서버자원을 클라이언트에 구애받지 않고 사용할 수 있게 하는 설계방식이다. 클라이언트에서 정보를 요청하면 서버는
특정 기기에 종속되지 않고 모든 기기에서 통용할 수 있는 JSON데이터를 응답으로 보낸다.

[4] REST  API특징
 ①Stateless: 각 요청은 서버에서 어떤 상태를 유지하지 않는 독립적인 요청한다.
 ②Client-Server: 클라이언트와 서버가 서로 독립적으로 진화할 수 있다.
 ③Cacheable: 클라이언트는 응답을 캐싱할 수 있어야 한다.
 ④Layered System: 클라이언트는 중간 서버에 대해 알 필요가 없다.

[5] REST API 설계 규칙
 ①명사 사용: URI는 자원을 표현하기 위해 명사를 사용해야 합니다. '/getAllUsers', '/getUserId'와 같은 동작을 나타내는 표현을 사용하지 않습니다.
 ②계층 관계 표현: URI 내에서 슬래시('/')는 계층 관계를 나타내는 데 사용됩니다. 예를 들어, 'notice/search'는 'search'가 'notice'의 하위 계층임을 나타냅니다.
 ③슬래시 포함 안 함: URI의 마지막 문자로 슬래시('/')를 포함하지 않습니다.
 ④하이픈 사용: URI 내에서는 언더바('_') 대신 하이픈('-')을 사용합니다.
 ⑤소문자 사용: URI는 소문자로만 구성됩니다.
 ⑥HTTP 응답 상태 코드 사용: 클라이언트는 요청의 성공, 실패 또는 잘못된 요청 등에 대한 피드백을 받아야 하며, 이는 HTTP 응답 상태 코드를 통해 전달됩니다. 
   400번대는 클라이언트 오류, 500번대는 서버 오류를 나타냅니다.
 ⑦파일 확장자 포함 안 함: URI에는 파일 확장자를 포함하지 않습니다.

[6]RESTful API
①RESTful API는 REST 원칙을 따르는 API를 의미한다. 
②이는 웹 서비스가 시스템 자원을 URL로 표시하고, 이 자원에 대한 CRUD(Create, Read, Update, Delete) 작업을 HTTP 메소드(GET, POST, PUT, DELETE)를 통해 수행하도록 설계된 것이다.
③RESTful API는 웹 서비스가 클라이언트에게 자원의 표현을 전송하고, 클라이언트는 필요에 따라 이러한 자원을 조작할 수 있게 해줍니다. 이는 웹 서비스가 사용자 친화적이고, 쉽게 확장 가능하며, 컴포넌트 간의 결합도를 낮춰주는 등의 이점을 가져다 준다.

[7]우리는 왜 RESTful APIs를 만드는 것일까?
 ①RESTful APIs 개발하는 가장 큰 이유는 Client Side를 정형화된 플랫폼이 아닌 모바일, PC, 어플리케이션 등 플랫폼에 제약을 두지 않는 것을 목표로 했기 때문 입니다.
 ②즉, 2010년 이전만 해도 Server Side에서 데이터를 전달해주는 Client 프로그램의 대상은 PC 브라우저로 그 대상이 명확 했다. 그렇다 보니 그냥 JSP ASP PHP 등을 잉요한 웹페이지를 구성하고 작업을 진행하면 됐다.
 ③하지만 스마트 기기들이 등장하면서 TV, 스마트 폰, 테블릿 등 Client 프로그램이 다양화 되고 그에 맞춰 Server를 일일이 만다는 것이 꽤 비효율적인 일이 되어 버렸다.
 ④이런 과정에서 개발자들은 Client Side를 전혀 고려하지 않고 메시지 기반, XML, JSON과 같은 Client에서 바로 객체로 치환 가능한 형태의 데이터 통신을 지향하게 되면서 Server와 Client의 역할을 분리하게 되었다.

[8] ResponseEntity
REST 컨트롤러의 반환형으로 REST API의 응답을 위해 사용하는 클래스이다.  REST API요청을 받아 응답할 때 이 클래스에 HTTP상태코드, 헤더, 본문을 실어 보낼 수 있다.

[9] HTTP 상태코드
 클라이언트가 보낸 요청이 성공했는지 실패했는지 알려 주는 코드이다. 응답은 100~500번대까지 5개 그룹으로 나누어 진다.
 ①1XX: Informational(정보 제공)
   임시 응답으로 현재 클라이언트의 요청까지는 처리되었으니 계속 진행하라는 의미입니다. HTTP 1.1 버전부터 추가되었습니다.
 ②2XX: Success(성공)
  클라이언트의 요청이 서버에서 성공적으로 처리되었다는 의미입니다.
 ③3XX: Redirection(리다이렉션)
  완전한 처리를 위해서 추가 동작이 필요한 경우입니다. 주로 서버의 주소 또는 요청한 URI의 웹 문서가 이동되었으니 그 주소로 다시 시도하라는 의미다.
 ④4XX: Client Error(클라이언트 에러)
   없는 페이지를 요청하는 등 클라이언트의 요청 메시지 내용이 잘못된 경우를 의미다.
 ⑤5XX: Server Error(서버 에러)
   서버 사정으로 메시지 처리에 문제가 발생한 경우입니다. 서버의 부하, DB 처리 과정 오류, 서버에서 익셉션이 발생하는 경우를 의미다.


